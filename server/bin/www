#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('smart-bot:server');
const http = require('http');
const os = require('os');
const cluster = require('cluster');
const numCores = os.cpus().length;

/**
 * Setup number of worker processes to share port which will be defined while setting up server
 */
const setupWorkerProcesses = () => {
  // iterate on number of cores need to be utilized by an application
  for (let i = 0; i < numCores; i++) {
    // creating workers and pushing reference in an array
    cluster.fork();
    
    // to receive messages from worker process
    for (const id in cluster.workers) {
      cluster.workers[id].on('message', message => console.log(message))
    }
    
    // if any of the worker process dies then start a new one by simply forking another one
    cluster.on('exit', (worker, code, signal) => {
      console.log(`Worker ${ worker.process.pid } died with code: ${ code }, and signal: ${ signal }`);
      console.log('Starting a new worker');
      
      cluster.fork();
    });
  }
};

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running`);
  return setupWorkerProcesses()
} else {
  const server = http.createServer(app);
  
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  console.log(`Worker ${process.pid} started`);
}

/**
 * Normalize a port into a number, string, or false.
 */
function onListening() {
  let addr = this.address();
  let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function normalizePort(val) {
  let port = parseInt(val, 10);
  
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  
  return false;
}